{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGird.js","hooks/useFerchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","anime","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGird","loading","state","setState","useEffect","then","imgs","setTimeout","useFerchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAQ,IAC3BR,GAAc,SAAAS,GAAK,OAAIP,GAAJ,mBAAkBO,OACrCN,EAAc,MAMlB,SACI,uBACCO,KAAM,OACNC,MAAOT,EACPU,SApBiB,SAACP,GACnBF,EAAeE,EAAEQ,OAAOF,a,+BCJtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIKA,EAAKC,OAJV,uBAIXC,EAJW,EAIXA,KAEHC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAebM,GAfa,4CAAH,sDCDRO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAInC,OACI,sBAAKc,UAAU,2CAAf,UACA,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCNCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAS,MAGf,WAIX,CAACpB,IAEGqB,EDrBuBM,CAAa3B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEnB,OACI,qCACA,qBAAIJ,UAAU,oCAAd,cAAsDhB,KAEhDoB,GAAW,mBAAGJ,UAAW,mCAAd,wBAEhB,qBAAKA,UAAW,YAAhB,SAGWH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEdtBiB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,YAAY,YAA1D,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAaA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAES4C,EAAWpB,KAAK,SAAAT,GAAQ,OAEtB,aADA,CACC,EAAD,CACAA,SAAaA,GADIA,Y,MCvBpC8B,IAASC,OACT,cAAC,EAAD,IACEC,SAASC,eAAe,W","file":"static/js/main.8252b30e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    \r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n            setInputValue( e.target.value );\r\n    }\r\n    //permite agregar nuevos elementos al arreglo\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        \r\n        if ( InputValue.trim().length >2 ) {\r\n            setCategories(anime =>[InputValue,...anime] );\r\n            setInputValue('');   \r\n        }\r\n    }\r\n    \r\n    return (\r\n        \r\n        <form onSubmit ={handleSubmit}>\r\n            <input \r\n             type ='text'\r\n             value={InputValue}\r\n             onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n//extra la informacion de un elemento en la web para que pueda ser utilizado\r\n//para esto seleciona ciertos parametros del elemento ejemplo: id, title\r\n\r\nexport  const getGifs = async( category ) =>{\r\n\r\n    const  url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Z9toB0KhB7ZnQeQ4T9f0NY5LZSzkYNEn`;\r\n    const  resp = await fetch (url);\r\n    const  { data }  = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n         return{\r\n             id: img.id,\r\n             title: img.title,\r\n             url: img.images?.downsized_medium.url\r\n         }\r\n    \r\n     }) \r\n\r\n    return gifs;\r\n    //console.log(gifs);\r\n    //setImages( gifs );\r\n }","//rfca crea lo basico\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({id, title,url}) => {\r\n\r\n    //console.log(id,title,url);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__bounceIn'>\r\n        <img src={url} alt= {title}></img>    \r\n        <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ } from 'react'\r\nimport { useFerchGifs } from '../hooks/useFerchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGird = ({category}) => {\r\n\r\n    const {data:images,loading} = useFerchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className='animate__animated animate__fadeIn' > { category}</h3>\r\n\r\n            { loading && <p className= 'animate__animated animate__flash'>loading...</p>}\r\n\r\n        {<div className ='Card-grid'>\r\n            \r\n                {\r\n                    images.map((img ) =>(\r\n                        <GifGridItem\r\n                         key= {img.id}\r\n                         { ...img }\r\n                         />\r\n                    ))\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFerchGifs = ( category ) => {\r\n   \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n\r\n        getGifs( category )\r\n            .then( imgs =>{\r\n                setTimeout(()=>{\r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false\r\n                    })\r\n\r\n                },1500);\r\n\r\n            })\r\n       \r\n     },[category]) \r\n\r\n    return state; // {dadta:[], loading : true};\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGird } from './components/GifGird';\r\n\r\n//forma basica de creacion de componentes\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories =['One Punch',' Samuria X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch','pokemon']);\r\n\r\n    //const handleAdd = ()=>{\r\n        \r\n        //setCategories ( [...categories, 'HunterXHunter'] ); //forma de agregar contenido a un arreglo\r\n        // al poner el arreglo de esta manera: ( ['HunterXHunter'], ...categories ); HunterXHunter quedaria primo\r\n        //y el contenido original del arreglo le seguiria\r\n        \r\n        //otra forma\r\n        // setCategories(anime =>[...anime,'HunterXhunter']);// recuerda bien los 3 puntos\r\n        //estos agregan contenido a un arreglo. pinche pelotudo.\r\n   // }\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={ setCategories }/>\r\n        <hr/>\r\n        <ol>\r\n             {\r\n                 categories.map( category => \r\n                   // <li key= {category} > {category} </li>\r\n                   <GifGird  key = {category}\r\n                   category = { category }/> \r\n                )\r\n             }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n//forma basica de crear un compente\nReactDOM.render(\n<GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}